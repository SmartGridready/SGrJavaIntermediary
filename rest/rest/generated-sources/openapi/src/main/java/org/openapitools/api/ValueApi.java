/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ValueDto;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-20T17:51:07.994232+02:00[Europe/Zurich]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "communications-controller", description = "the communications-controller API")
public interface ValueApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /value/{device}/{functionalProfile}/{dataPoint}
     *
     * @param device  (required)
     * @param functionalProfile  (required)
     * @param dataPoint  (required)
     * @return Not Found (status code 404)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "getVal",
        tags = { "communications-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/value/{device}/{functionalProfile}/{dataPoint}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<String> getVal(
        @Parameter(name = "device", description = "", required = true, in = ParameterIn.PATH) @PathVariable("device") String device,
        @Parameter(name = "functionalProfile", description = "", required = true, in = ParameterIn.PATH) @PathVariable("functionalProfile") String functionalProfile,
        @Parameter(name = "dataPoint", description = "", required = true, in = ParameterIn.PATH) @PathVariable("dataPoint") String dataPoint
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /value/{device}/{functionalProfile}/{dataPoint}
     *
     * @param device  (required)
     * @param functionalProfile  (required)
     * @param dataPoint  (required)
     * @param valueDto  (required)
     * @return Not Found (status code 404)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "setVal",
        tags = { "communications-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/value/{device}/{functionalProfile}/{dataPoint}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> setVal(
        @Parameter(name = "device", description = "", required = true, in = ParameterIn.PATH) @PathVariable("device") String device,
        @Parameter(name = "functionalProfile", description = "", required = true, in = ParameterIn.PATH) @PathVariable("functionalProfile") String functionalProfile,
        @Parameter(name = "dataPoint", description = "", required = true, in = ParameterIn.PATH) @PathVariable("dataPoint") String dataPoint,
        @Parameter(name = "ValueDto", description = "", required = true) @Valid @RequestBody ValueDto valueDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
