/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.EntityModelExternalInterfaceXml;
import org.openapitools.model.ExternalInterfaceXml;
import org.openapitools.model.SaveRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-09-20T17:51:07.994232+02:00[Europe/Zurich]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "external-interface-xml-controller", description = "the external-interface-xml-controller API")
public interface EiXmlApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /eiXml/{name}
     *
     * @param name  (required)
     * @return Not Found (status code 404)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "delete",
        tags = { "external-interface-xml-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/eiXml/{name}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<Void> delete(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /eiXml/{name}
     *
     * @param name  (required)
     * @return Not Found (status code 404)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "externalInterfaceXml",
        tags = { "external-interface-xml-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = ExternalInterfaceXml.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/eiXml/{name}",
        produces = { "*/*" }
    )
    
    default ResponseEntity<ExternalInterfaceXml> externalInterfaceXml(
        @Parameter(name = "name", description = "", required = true, in = ParameterIn.PATH) @PathVariable("name") String name
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"xml\" : \"xml\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /eiXml
     *
     * @return Not Found (status code 404)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "getAll",
        tags = { "external-interface-xml-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", array = @ArraySchema(schema = @Schema(implementation = ExternalInterfaceXml.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/eiXml",
        produces = { "*/*" }
    )
    
    default ResponseEntity<List<ExternalInterfaceXml>> getAll(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "[ { \"xml\" : \"xml\", \"name\" : \"name\", \"id\" : 0 }, { \"xml\" : \"xml\", \"name\" : \"name\", \"id\" : 0 } ]";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /eiXml/{fileName}
     *
     * @param fileName  (required)
     * @param saveRequest  (optional)
     * @return Not Found (status code 404)
     *         or OK (status code 200)
     */
    @Operation(
        operationId = "save",
        tags = { "external-interface-xml-controller" },
        responses = {
            @ApiResponse(responseCode = "404", description = "Not Found", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "*/*", schema = @Schema(implementation = EntityModelExternalInterfaceXml.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/eiXml/{fileName}",
        produces = { "*/*" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<EntityModelExternalInterfaceXml> save(
        @Parameter(name = "fileName", description = "", required = true, in = ParameterIn.PATH) @PathVariable("fileName") String fileName,
        @Parameter(name = "SaveRequest", description = "") @Valid @RequestBody(required = false) SaveRequest saveRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("*/*"))) {
                    String exampleString = "{ \"_links\" : { \"key\" : { \"hreflang\" : \"hreflang\", \"templated\" : true, \"profile\" : \"profile\", \"name\" : \"name\", \"href\" : \"href\", \"title\" : \"title\", \"type\" : \"type\", \"deprecation\" : \"deprecation\" } }, \"xml\" : \"xml\", \"name\" : \"name\", \"id\" : 0 }";
                    ApiUtil.setExampleResponse(request, "*/*", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
