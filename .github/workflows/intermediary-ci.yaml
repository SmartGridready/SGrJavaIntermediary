# CI pipeline of Intermediary
name: Create and publish a Docker image

# Configures this workflow to run every time a change is pushed to the master branch or a tag.
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Custom tag to build'
        required: false
        type: string
  push:
    branches: ['**']
    tags: ['**']

# Defines two custom environment variables for the workflow. These are used for the Container registry domain,
# and a name for the Docker image that this workflow builds.
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: SmartGridready/sgr-intermediary

# There is a single job in this workflow. It's configured to run on the latest available version of Ubuntu.
jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Init
        id: init
        run: |
          echo "push_image=${{ (github.ref == 'refs/heads/master') || startsWith(github.ref, 'refs/tags/') || (inputs.tag != '') }}" >> "$GITHUB_OUTPUT"

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Java 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Restore Maven cache
        uses: skjolber/maven-cache-github-action@v3.1.2
        with:
          step: restore

      - name: Run the Maven install phase
        run: mvn --batch-mode --update-snapshots install

      - name: Save Maven cache
        uses: skjolber/maven-cache-github-action@v3.1.2
        with:
          step: save

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=tag
            type=semver,enable=${{ inputs.tag != '' }},pattern={{raw}},value=${{ inputs.tag }}

      # This step sets up the Docker Buildx system.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.init.outputs.push_image }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
